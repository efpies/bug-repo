@using QoodenTask.Models
@using QoodenTask.Enums
@using QoodenTask.ServiceInterfaces
@using QoodenTask.Common
@using Index = QoodenTask.Pages.Index

@inject IUserService UserService
@inject IBalanceService BalanceService
@inject DialogService DialogService


@if (_userBalances.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="100" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@_userBalances" TItem="KeyValuePair<User,decimal>" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.And">
        <Columns>
            <RadzenDataGridColumn TItem="KeyValuePair<User,decimal>" Property="Key.UserName" Filterable="true" Sortable="true" Title="User Name" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="KeyValuePair<User,decimal>" Property="Key.Role" Filterable="false" Sortable="false" Title="Role" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="KeyValuePair<User,decimal>" Property="Value" Filterable="false" Sortable="false" Title="Buttons" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="KeyValuePair<User,decimal>" Filterable="false" Sortable="false" Title="Buttons" Frozen="true" TextAlign="TextAlign.Center" Width="200px">
                <Template Context="userBalance">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click=@(() => ShowUserInfo(userBalance.Key)) Text="Show"/>
                    @if (userBalance.Key.Role == Constants.User)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Shade="Shade.Lighter" class="m-1" Click=@(() => ShowUserTxs(userBalance.Key)) Text="Transactions"/>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] public string? Role { get; set; }
    [Parameter] public int UserId { get; set; }
    
    private Dictionary<User, decimal> _userBalances = new Dictionary<User, decimal>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadUsersWithBalances();
    }

    private async Task LoadUsersWithBalances()
    {
        var users = await UserService.GetAll();
        if (users != null)
            foreach (var user in users)
            {
                _userBalances.Add(user, await BalanceService.GetUsdBalance(user.Id));
            }
    }

    public async Task ShowUserInfo(User user)
    {
        await DialogService.OpenAsync<UserInfo>($"User info",
            new Dictionary<string, object>() { { "User", user } },
            new DialogOptions() { Resizable = true, Draggable = true });
    }
    
    public async Task ShowUserTxs(User user)
    {
        await DialogService.OpenAsync<TrasactionsData>($"Transactions of {user.UserName}",
            new Dictionary<string, object>() { { "Role", user.Role }, {"UserId", user.Id} },
            new DialogOptions() { Resizable = true, Draggable = true });
    }
}